name: Build and Deploy YouTube Summary Backend

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGION: europe-southwest1
  PROJECT_ID: youtube-api-404423
  REPO_NAME: video-summary-api
  IMAGE_NAME: youtube-summary-api
  NODE_ENV: production

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug secrets (will be hidden in logs)
      run: |
        echo "Checking if GCP_SERVICE_ACCOUNT_KEY is set..."
        if [ -n "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" ]; then
          echo "✅ GCP_SERVICE_ACCOUNT_KEY is set"
          echo "Length: ${#GCP_SERVICE_ACCOUNT_KEY}"
          echo "First 50 chars: ${GCP_SERVICE_ACCOUNT_KEY:0:50}..."
        else
          echo "❌ GCP_SERVICE_ACCOUNT_KEY is not set or empty"
        fi
        
        echo "Repository: ${{ github.repository }}"
        echo "Event: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Actor: ${{ github.actor }}"

    - name: Verify project files
      run: |
        echo "Checking package.json..."
        cat package.json
        echo "Checking Dockerfile..."
        cat Dockerfile
        echo "Checking .dockerignore..."
        cat .dockerignore
        echo "Checking if data directory exists..."
        ls -la data/ || echo "Data directory not found"

    - name: Test npm install locally
      run: |
        echo "Node.js version:"
        node --version
        echo "npm version:"
        npm --version
        echo "Testing npm install..."
        npm install --verbose
        echo "npm install completed successfully"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Debug Docker environment
      run: |
        echo "Docker version:"
        docker version
        echo "Docker info:"
        docker info
        echo "Available disk space:"
        df -h
        echo "Current directory contents:"
        ls -la

    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'
        project_id: ${{ env.PROJECT_ID }}
        create_credentials_file: true
        export_environment_variables: true
        universe: googleapis.com
        cleanup_credentials: true
        access_token_lifetime: 3600s
        access_token_scopes: https://www.googleapis.com/auth/cloud-platform
        id_token_include_email: false

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

    - name: Build and push Docker image
      run: |
        echo "Building Docker image..."
        docker build --progress=plain --no-cache -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest .
        echo "Pushing Docker image..."
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.IMAGE_NAME }}-service \
          --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest \
          --region=${{ env.REGION }} \
          --platform=managed \
          --allow-unauthenticated \
          --memory=1Gi \
          --cpu=1 \
          --min-instances=0 \
          --max-instances=5 \
          --concurrency=80 \
          --timeout=900 \
          --cpu-throttling \
          --no-cpu-boost \
          --set-env-vars="NODE_ENV=${{ env.NODE_ENV }}"

    - name: Set environment variables
      run: |
        gcloud run services update ${{ env.IMAGE_NAME }}-service \
          --region=${{ env.REGION }} \
          --update-env-vars="OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" \
          --update-env-vars="OPENAI_MODEL=${{ secrets.OPENAI_MODEL || 'gpt-4' }}" \
          --update-env-vars="YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}" \
          --update-env-vars="YOUTUBE_USE_COOKIES=${{ secrets.YOUTUBE_USE_COOKIES || 'false' }}" \
          --update-env-vars="AZURE_STORAGE_CONNECTION_STRING=${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
          --update-env-vars="AZURE_STORAGE_CONTAINER_NAME=${{ secrets.AZURE_STORAGE_CONTAINER_NAME || 'uploads' }}" \
          --update-env-vars="AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" \
          --update-env-vars="AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" \
          --update-env-vars="AZURE_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" \
          --update-env-vars="AZURE_STORAGE_ACCOUNT_NAME=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
          --update-env-vars="CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}" \
          --update-env-vars="RATE_LIMIT_MAX=${{ secrets.RATE_LIMIT_MAX || '100' }}" \
          --update-env-vars="MAX_CONCURRENT_REQUESTS=${{ secrets.MAX_CONCURRENT_REQUESTS || '2' }}" \
          --update-env-vars="REQUEST_TIMEOUT_MS=${{ secrets.REQUEST_TIMEOUT_MS || '30000' }}" \
          --update-env-vars="MAX_FILE_SIZE=${{ secrets.MAX_FILE_SIZE || '104857600' }}"

    - name: Clean up old revisions
      run: |
        # Keep only the latest 2 revisions, delete the rest
        gcloud run revisions list --service=${{ env.IMAGE_NAME }}-service --region=${{ env.REGION }} \
          --format="value(metadata.name)" --sort-by="~metadata.creationTimestamp" | \
          tail -n +3 | \
          xargs -I {} gcloud run revisions delete {} --region=${{ env.REGION }} --quiet || true
